Traceback (most recent call last):
  File "/home/rosa/anaconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/rosa/.local/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/rosa/.local/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/home/rosa/anaconda3/envs/jupyterbook/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/rosa/.local/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/rosa/.local/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/rosa/.local/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.graph_objs as go
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

covid_df = pd.read_csv('docs/owid-covid-data.csv')
gdp_df = pd.read_csv('docs/GDP-data.csv', skiprows=4)

covid_2021_df = covid_df[covid_df['date'].str.startswith('2021')]
covid_deaths_2021 = covid_2021_df.groupby('location').last()['total_deaths_per_million'].reset_index()


gdp_df = gdp_df.rename(columns={"Country Name": 'location'})
gdp_df = gdp_df[['location', "2021"]]

merged_df = pd.merge(covid_deaths_2021, gdp_df, on='location', how='inner')

#merged_df = merged_df[merged_df['location'] != 'World'] 


plt.figure(figsize=(10, 6))
sns.regplot(
    x='2021',
    y='total_deaths_per_million', 
    data=merged_df, 
    scatter_kws={'alpha':0.7}
)

# Customizing the plot
plt.title('GDP vs. COVID-19 Deaths in 2021')
plt.xlabel('GDP in 2021')
plt.ylabel('Total COVID-19 Deaths in 2021')
plt.grid(True)  # Adding grid

# Display the plot
plt.show()

fig = go.Figure(data=go.Scatter(
    x=merged_df['2021'],
    y=merged_df['total_deaths_per_million'],
    mode='markers',
    marker=dict(
        size=10,
        color='blue',  # You can set a color if needed
        opacity=0.8,
        
    ),
    text=merged_df['location']
))

# Customize layout
fig.update_layout(
    title='GDP vs. COVID-19 Deaths in 2021',
    xaxis_title='GDP in 2021',
    yaxis_title='Total COVID-19 Deaths in 2021',
    font=dict(
        family="Courier New, monospace",
        size=18,
        color="#7f7f7f"
    )
)

# Show the plot
fig.show()
x_value = covid_2021_df.groupby('location').last()['people_vaccinated_per_hundred'].reset_index()
y_value = covid_2021_df.groupby('location').last()['excess_mortality_cumulative_per_million'].reset_index()

# Creating the figure
fig2 = go.Figure(data=go.Scatter(
    x=x_value['people_vaccinated_per_hundred'],
    y=y_value['excess_mortality_cumulative_per_million'],
    mode='markers',
    marker=dict(
        size=10,
        color='blue',  # You can set a color if needed
        opacity=0.8,
    ),
    text=covid_2021_df['location'].iloc[-1]  # Assuming 'location' is the country name
))

# Customize layout
fig2.update_layout(
    title='Excess mortality rate vs. People vaccinated per hundred in 2021',
    xaxis_title='People vaccinated per hundred in 2021',
    yaxis_title='Excess mortality per mil in 2021',
    font=dict(
        family="Courier New, monospace",
        size=18,
        color="#7f7f7f"
    )
)

# Show the plot
fig2.show()
income_categories = ['High income', 'Upper middle income', 'Lower middle income', 'Low income']

filtered_df = covid_2021_df[covid_2021_df['location'].isin(income_categories)]

aggregated_df = filtered_df.groupby('location').last()['total_cases_per_million'].reset_index()

trace = go.Bar(
    x=aggregated_df['location'],
    y=aggregated_df['total_cases_per_million']
)

layout = go.Layout(
    title='Total Cases per Million by Income Category',
    xaxis=dict(title='Income Category'),
    yaxis=dict(title='Total Cases per Million')
)

fig = go.Figure(data=[trace], layout=layout)

fig.show()

fig3 = px.box(
    merged_df, 
    x='2021', 
    y='total_deaths_per_million', 
    title='Customized Interactive Box Plot',
    points="all"  # Show all points
)
fig3.update_layout(
    xaxis_title='Your Category',
    yaxis_title='Your Value'
)
fig3.show()

# Step 2: Select the variables you want to compare
variables_to_compare = ['total_deaths_per_million', '2021', 'total_cases_per_million', 'people_vaccinated_per_hundred', 'total_tests_per_million']


fig4 = px.parallel_coordinates(merged_df, dimensions=variables_to_compare)
fig4.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[1], line 134[0m
[1;32m    130[0m [38;5;66;03m# Step 2: Select the variables you want to compare[39;00m
[1;32m    131[0m variables_to_compare [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mtotal_deaths_per_million[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m2021[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mtotal_cases_per_million[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mpeople_vaccinated_per_hundred[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mtotal_tests_per_million[39m[38;5;124m'[39m]
[0;32m--> 134[0m fig4 [38;5;241m=[39m [43mpx[49m[38;5;241;43m.[39;49m[43mparallel_coordinates[49m[43m([49m[43mmerged_df[49m[43m,[49m[43m [49m[43mdimensions[49m[38;5;241;43m=[39;49m[43mvariables_to_compare[49m[43m)[49m
[1;32m    135[0m fig4[38;5;241m.[39mshow()

File [0;32m~/.local/lib/python3.10/site-packages/plotly/express/_chart_types.py:1418[0m, in [0;36mparallel_coordinates[0;34m(data_frame, dimensions, color, labels, color_continuous_scale, range_color, color_continuous_midpoint, title, template, width, height)[0m
[1;32m   1400[0m [38;5;28;01mdef[39;00m [38;5;21mparallel_coordinates[39m(
[1;32m   1401[0m     data_frame[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[1;32m   1402[0m     dimensions[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[0;32m   (...)[0m
[1;32m   1411[0m     height[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[1;32m   1412[0m ) [38;5;241m-[39m[38;5;241m>[39m go[38;5;241m.[39mFigure:
[1;32m   1413[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m   1414[0m [38;5;124;03m    In a parallel coordinates plot, each row of `data_frame` is represented[39;00m
[1;32m   1415[0m [38;5;124;03m    by a polyline mark which traverses a set of parallel axes, one for each[39;00m
[1;32m   1416[0m [38;5;124;03m    of the `dimensions`.[39;00m
[1;32m   1417[0m [38;5;124;03m    """[39;00m
[0;32m-> 1418[0m     [38;5;28;01mreturn[39;00m [43mmake_figure[49m[43m([49m[43margs[49m[38;5;241;43m=[39;49m[38;5;28;43mlocals[39;49m[43m([49m[43m)[49m[43m,[49m[43m [49m[43mconstructor[49m[38;5;241;43m=[39;49m[43mgo[49m[38;5;241;43m.[39;49m[43mParcoords[49m[43m)[49m

File [0;32m~/.local/lib/python3.10/site-packages/plotly/express/_core.py:2090[0m, in [0;36mmake_figure[0;34m(args, constructor, trace_patch, layout_patch)[0m
[1;32m   2087[0m layout_patch [38;5;241m=[39m layout_patch [38;5;129;01mor[39;00m {}
[1;32m   2088[0m apply_default_cascade(args)
[0;32m-> 2090[0m args [38;5;241m=[39m [43mbuild_dataframe[49m[43m([49m[43margs[49m[43m,[49m[43m [49m[43mconstructor[49m[43m)[49m
[1;32m   2091[0m [38;5;28;01mif[39;00m constructor [38;5;129;01min[39;00m [go[38;5;241m.[39mTreemap, go[38;5;241m.[39mSunburst, go[38;5;241m.[39mIcicle] [38;5;129;01mand[39;00m args[[38;5;124m"[39m[38;5;124mpath[39m[38;5;124m"[39m] [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m   2092[0m     args [38;5;241m=[39m process_dataframe_hierarchy(args)

File [0;32m~/.local/lib/python3.10/site-packages/plotly/express/_core.py:1492[0m, in [0;36mbuild_dataframe[0;34m(args, constructor)[0m
[1;32m   1489[0m     args[[38;5;124m"[39m[38;5;124mcolor[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;28;01mNone[39;00m
[1;32m   1490[0m [38;5;66;03m# now that things have been prepped, we do the systematic rewriting of `args`[39;00m
[0;32m-> 1492[0m df_output, wide_id_vars [38;5;241m=[39m [43mprocess_args_into_dataframe[49m[43m([49m
[1;32m   1493[0m [43m    [49m[43margs[49m[43m,[49m[43m [49m[43mwide_mode[49m[43m,[49m[43m [49m[43mvar_name[49m[43m,[49m[43m [49m[43mvalue_name[49m
[1;32m   1494[0m [43m[49m[43m)[49m
[1;32m   1496[0m [38;5;66;03m# now that `df_output` exists and `args` contains only references, we complete[39;00m
[1;32m   1497[0m [38;5;66;03m# the special-case and wide-mode handling by further rewriting args and/or mutating[39;00m
[1;32m   1498[0m [38;5;66;03m# df_output[39;00m
[1;32m   1500[0m count_name [38;5;241m=[39m _escape_col_name(df_output, [38;5;124m"[39m[38;5;124mcount[39m[38;5;124m"[39m, [var_name, value_name])

File [0;32m~/.local/lib/python3.10/site-packages/plotly/express/_core.py:1213[0m, in [0;36mprocess_args_into_dataframe[0;34m(args, wide_mode, var_name, value_name)[0m
[1;32m   1211[0m         [38;5;28;01mif[39;00m argument [38;5;241m==[39m [38;5;124m"[39m[38;5;124mindex[39m[38;5;124m"[39m:
[1;32m   1212[0m             err_msg [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m To use the index, pass it in directly as `df.index`.[39m[38;5;124m"[39m
[0;32m-> 1213[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(err_msg)
[1;32m   1214[0m [38;5;28;01melif[39;00m length [38;5;129;01mand[39;00m [38;5;28mlen[39m(df_input[argument]) [38;5;241m!=[39m length:
[1;32m   1215[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1216[0m         [38;5;124m"[39m[38;5;124mAll arguments should have the same length. [39m[38;5;124m"[39m
[1;32m   1217[0m         [38;5;124m"[39m[38;5;124mThe length of column argument `df[[39m[38;5;132;01m%s[39;00m[38;5;124m]` is [39m[38;5;132;01m%d[39;00m[38;5;124m, whereas the [39m[38;5;124m"[39m
[0;32m   (...)[0m
[1;32m   1224[0m         )
[1;32m   1225[0m     )

[0;31mValueError[0m: Value of 'dimensions_2' is not the name of a column in 'data_frame'. Expected one of ['location', 'total_deaths_per_million', '2021'] but received: total_cases_per_million

